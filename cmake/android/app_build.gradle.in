def buildAsLibrary = project.hasProperty('BUILD_AS_LIBRARY');
def buildAsApplication = !buildAsLibrary
if (buildAsApplication) {
    apply plugin: 'com.android.application'
}
else {
    apply plugin: 'com.android.library'
}

android {
    compileSdkVersion 31
    defaultConfig {
        if (buildAsApplication) {
            applicationId "${SOSAGE_EDITOR_EXT}.${SOSAGE_EDITOR_PATH}.${SOSAGE_ACTIVITY}"
        }
        minSdkVersion 16
        targetSdkVersion 31
        versionCode ${SOSAGE_VERSION_NUMBER}
        versionName "${SOSAGE_VERSION_NAME}"
        externalNativeBuild {
            ndkBuild {
                arguments "APP_PLATFORM=android-16"
                abiFilters 'armeabi-v7a', 'arm64-v8a', 'x86', 'x86_64'
            }
        }
    }
    signingConfigs {
         release {
            if (project.hasProperty('SUPERFLUOUS_UPLOAD_STORE_FILE')) {
                storeFile file(SUPERFLUOUS_UPLOAD_STORE_FILE)
                storePassword SUPERFLUOUS_UPLOAD_STORE_PASSWORD
                keyAlias SUPERFLUOUS_UPLOAD_KEY_ALIAS
                keyPassword SUPERFLUOUS_UPLOAD_KEY_PASSWORD
            }
        }
    }
    buildTypes {
        release {
           minifyEnabled false
//           shrinkResources true
//           debuggable false
           signingConfig signingConfigs.release
           proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    applicationVariants.all { variant ->
        tasks["merge${HACK_VARIANT_NAME}Assets"]
            .dependsOn("externalNativeBuild${HACK_VARIANT_NAME}")
    }
    if (!project.hasProperty('EXCLUDE_NATIVE_LIBS')) {
        sourceSets.main {
            jniLibs.srcDir 'libs'
        }
        externalNativeBuild {
            ndkBuild {
                path 'jni/Android.mk'
            }
        }
    }
    lintOptions {
        abortOnError false
    }

    if (buildAsLibrary) {
        libraryVariants.all { variant ->
            variant.outputs.each { output ->
                def outputFile = output.outputFile
                if (outputFile != null && outputFile.name.endsWith(".aar")) {
                    def fileName = "org.libsdl.app.aar";
                    output.outputFile = new File(outputFile.parent, fileName);
                }
            }
        }
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
}
